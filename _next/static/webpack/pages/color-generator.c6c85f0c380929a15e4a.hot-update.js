webpackHotUpdate_N_E("pages/color-generator",{

/***/ "./lib/color-generator/generateColors.js":
/*!***********************************************!*\
  !*** ./lib/color-generator/generateColors.js ***!
  \***********************************************/
/*! exports provided: generateColors, getColors, isHex, hexToHSL, HSLToHex, getNeutralBaseColorsFromBrandPrimaryHex, getPrimaryColorsFromBrandPrimaryHex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateColors\", function() { return generateColors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getColors\", function() { return getColors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isHex\", function() { return isHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hexToHSL\", function() { return hexToHSL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HSLToHex\", function() { return HSLToHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getNeutralBaseColorsFromBrandPrimaryHex\", function() { return getNeutralBaseColorsFromBrandPrimaryHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPrimaryColorsFromBrandPrimaryHex\", function() { return getPrimaryColorsFromBrandPrimaryHex; });\n/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n\n\n\nvar Color = function Color(color, name) {\n  Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, Color);\n\n  this.hex = color;\n  this.rgb = hexToRgb(color);\n  this.name = name;\n};\n\nvar hex = function hex(color) {\n  var colorString = color.toString(16);\n  return colorString.length === 1 ? \"0\".concat(colorString) : colorString;\n};\n\nvar calculateColor = function calculateColor(color1, color2, ratio) {\n  ratio = (Math.round(ratio * 100) / 100).toFixed(2);\n  var r = Math.ceil(parseInt(color2.substring(0, 2), 16) * ratio + parseInt(color1.substring(0, 2), 16) * (1 - ratio));\n  var g = Math.ceil(parseInt(color2.substring(2, 4), 16) * ratio + parseInt(color1.substring(2, 4), 16) * (1 - ratio));\n  var b = Math.ceil(parseInt(color2.substring(4, 6), 16) * ratio + parseInt(color1.substring(4, 6), 16) * (1 - ratio));\n  return hex(r) + hex(g) + hex(b);\n};\n\nvar hexToRgb = function hexToRgb(hex) {\n  var r = parseInt(hex.substring(1, 3), 16);\n  var g = parseInt(hex.substring(3, 5), 16);\n  var b = parseInt(hex.substring(5, 7), 16);\n  return \"\".concat(r, \",\").concat(g, \",\").concat(b);\n};\n\nvar generateColors = function generateColors(color1, color2, variations) {\n  if (!variations) {\n    return [];\n  }\n\n  color1 = color1.startsWith('#') ? color1 : \"#\".concat(color1);\n  color2 = color2.startsWith('#') ? color2 : \"#\".concat(color2);\n  var percentage = 1 / variations;\n  var numberOfLoops = 1 / percentage - 1;\n  var colors = [];\n\n  for (var i = 1; i <= numberOfLoops; i++) {\n    colors = [].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(colors), ['#' + calculateColor(color1.slice(1), color2.slice(1), i * percentage)]);\n  }\n\n  return colors;\n};\n\nvar generateColorRange = function generateColorRange(color, lightVariations, lightPercentage, darkVariations, darkPercentage, hook, startIndex, includeEnds, isDark) {\n  var firstColor = calculateColor('ffffff', color.slice(1), 1 - lightPercentage);\n  var lastColor = calculateColor(color.slice(1), '000000', darkPercentage);\n  var lightColors = generateColors(firstColor, color, lightVariations);\n  var darkColors = generateColors(color, lastColor, darkVariations);\n  var out = [];\n\n  if (lightVariations) {\n    out = [\"#\".concat(firstColor)].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(lightColors), Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(out));\n  }\n\n  out = [].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(out), [color]);\n\n  if (darkVariations) {\n    out = [].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(out), Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(darkColors), [\"#\".concat(lastColor)]);\n  }\n\n  if (includeEnds) {\n    out = [\"#ffffff\"].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(out), [\"#000000\"]);\n  }\n\n  if (isDark) {\n    out.reverse();\n  }\n\n  return out.map(function (color, index) {\n    var name = \"--\".concat(hook, \"-\").concat(index + (startIndex ? startIndex : 0));\n    return new Color(color, name);\n  });\n};\n\nvar getColors = function getColors(colorsJson, selectedColors, isDark) {\n  var generated = {};\n\n  for (var _i = 0, _Object$values = Object.values(colorsJson.colors); _i < _Object$values.length; _i++) {\n    var color = _Object$values[_i];\n    var id = color.id,\n        lightVariations = color.lightVariations,\n        lightPercentage = color.lightPercentage,\n        darkVariations = color.darkVariations,\n        darkPercentage = color.darkPercentage,\n        hook = color.hook,\n        startIndex = color.startIndex;\n    var baseColor = selectedColors[id];\n\n    if (!baseColor || baseColor.length !== 7 || id === 'surfaceNeutral' || id === 'surfaceDivider') {\n      continue;\n    }\n\n    generated[id] = generateColorRange(baseColor, lightVariations, lightPercentage, darkVariations, darkPercentage, hook, startIndex, id === 'neutrals' ? true : false, isDark && id === 'neutrals' ? true : false);\n  }\n\n  if (generated.neutrals) {\n    var neutralColors = generated.neutrals;\n    var surfaceNeutralBase = neutralColors[4].hex;\n    var surfaceNeutralColors = generateColorRange(surfaceNeutralBase, colorsJson.colors.surfaceNeutral.lightVariations, colorsJson.colors.surfaceNeutral.lightPercentage, colorsJson.colors.surfaceNeutral.darkVariations, colorsJson.colors.surfaceNeutral.darkPercentage, colorsJson.colors.surfaceNeutral.hook, colorsJson.colors.surfaceNeutral.startIndex, false, isDark);\n    isDark ? surfaceNeutralColors.shift() : surfaceNeutralColors.pop();\n    generated.surfaceNeutral = surfaceNeutralColors;\n    var surfaceDividerBase = neutralColors[8].hex;\n    var surfaceDividerColors = generateColorRange(surfaceDividerBase, colorsJson.colors.surfaceDivider.lightVariations, colorsJson.colors.surfaceDivider.lightPercentage, colorsJson.colors.surfaceDivider.darkVariations, colorsJson.colors.surfaceDivider.darkPercentage, colorsJson.colors.surfaceDivider.hook, colorsJson.colors.surfaceDivider.startIndex, false, isDark);\n    isDark ? surfaceDividerColors.shift() : surfaceDividerColors.pop();\n    generated.surfaceDivider = surfaceDividerColors;\n  }\n\n  return generated;\n};\nvar isHex = function isHex(hex) {\n  return /^#[0-9A-F]{6}$/i.test(hex);\n};\nvar hexToHSL = function hexToHSL(H) {\n  // Convert hex to RGB first\n  var r = 0,\n      g = 0,\n      b = 0;\n\n  if (H.length == 4) {\n    r = \"0x\" + H[1] + H[1];\n    g = \"0x\" + H[2] + H[2];\n    b = \"0x\" + H[3] + H[3];\n  } else if (H.length == 7) {\n    r = \"0x\" + H[1] + H[2];\n    g = \"0x\" + H[3] + H[4];\n    b = \"0x\" + H[5] + H[6];\n  } // Then to HSL\n\n\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  var cmin = Math.min(r, g, b),\n      cmax = Math.max(r, g, b),\n      delta = cmax - cmin,\n      h = 0,\n      s = 0,\n      l = 0;\n  if (delta == 0) h = 0;else if (cmax == r) h = (g - b) / delta % 6;else if (cmax == g) h = (b - r) / delta + 2;else h = (r - g) / delta + 4;\n  h = Math.round(h * 60);\n  if (h < 0) h += 360;\n  l = (cmax + cmin) / 2;\n  s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1); // return \"hsl(\" + Math.round(h) + \",\" + Math.round(s) + \",\" + Math.round(l) + \")\";\n\n  return {\n    h: Math.round(h),\n    s: Math.round(s),\n    l: Math.round(l)\n  };\n};\nvar HSLToHex = function HSLToHex(h, s, l) {\n  s /= 100;\n  l /= 100;\n  var c = (1 - Math.abs(2 * l - 1)) * s,\n      x = c * (1 - Math.abs(h / 60 % 2 - 1)),\n      m = l - c / 2,\n      r = 0,\n      g = 0,\n      b = 0;\n\n  if (0 <= h && h < 60) {\n    r = c;\n    g = x;\n    b = 0;\n  } else if (60 <= h && h < 120) {\n    r = x;\n    g = c;\n    b = 0;\n  } else if (120 <= h && h < 180) {\n    r = 0;\n    g = c;\n    b = x;\n  } else if (180 <= h && h < 240) {\n    r = 0;\n    g = x;\n    b = c;\n  } else if (240 <= h && h < 300) {\n    r = x;\n    g = 0;\n    b = c;\n  } else if (300 <= h && h < 360) {\n    r = c;\n    g = 0;\n    b = x;\n  } // Having obtained RGB, convert channels to hex\n\n\n  r = Math.round((r + m) * 255).toString(16);\n  g = Math.round((g + m) * 255).toString(16);\n  b = Math.round((b + m) * 255).toString(16); // Prepend 0s, if necessary\n\n  if (r.length == 1) r = \"0\" + r;\n  if (g.length == 1) g = \"0\" + g;\n  if (b.length == 1) b = \"0\" + b;\n  return \"#\" + r + g + b;\n};\n_c = HSLToHex;\nvar getNeutralBaseColorsFromBrandPrimaryHex = function getNeutralBaseColorsFromBrandPrimaryHex(hex) {\n  var _hexToHSL = hexToHSL(hex),\n      h = _hexToHSL.h,\n      s = _hexToHSL.s,\n      l = _hexToHSL.l;\n\n  h = h + 2 > 360 ? 360 : h + 2;\n  s = s - 12 < 0 ? 0 : s - 12;\n  l = l + 11 > 100 ? 100 : l + 11;\n  return HSLToHex(h, s, l);\n};\nvar getPrimaryColorsFromBrandPrimaryHex = function getPrimaryColorsFromBrandPrimaryHex(hex) {\n  var _hexToHSL2 = hexToHSL(hex),\n      h = _hexToHSL2.h,\n      s = _hexToHSL2.s,\n      l = _hexToHSL2.l;\n\n  h = h - 19 < 0 ? 0 : h - 19;\n  s = s + 41 > 100 ? 100 : s + 41;\n  l = l + 11 > 100 ? 100 : l + 11;\n  return HSLToHex(h, s, l);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"HSLToHex\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL2NvbG9yLWdlbmVyYXRvci9nZW5lcmF0ZUNvbG9ycy5qcz9kYWY1Il0sIm5hbWVzIjpbIkNvbG9yIiwiY29sb3IiLCJuYW1lIiwiaGV4IiwicmdiIiwiaGV4VG9SZ2IiLCJjb2xvclN0cmluZyIsInRvU3RyaW5nIiwibGVuZ3RoIiwiY2FsY3VsYXRlQ29sb3IiLCJjb2xvcjEiLCJjb2xvcjIiLCJyYXRpbyIsIk1hdGgiLCJyb3VuZCIsInRvRml4ZWQiLCJyIiwiY2VpbCIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwiZyIsImIiLCJnZW5lcmF0ZUNvbG9ycyIsInZhcmlhdGlvbnMiLCJzdGFydHNXaXRoIiwicGVyY2VudGFnZSIsIm51bWJlck9mTG9vcHMiLCJjb2xvcnMiLCJpIiwic2xpY2UiLCJnZW5lcmF0ZUNvbG9yUmFuZ2UiLCJsaWdodFZhcmlhdGlvbnMiLCJsaWdodFBlcmNlbnRhZ2UiLCJkYXJrVmFyaWF0aW9ucyIsImRhcmtQZXJjZW50YWdlIiwiaG9vayIsInN0YXJ0SW5kZXgiLCJpbmNsdWRlRW5kcyIsImlzRGFyayIsImZpcnN0Q29sb3IiLCJsYXN0Q29sb3IiLCJsaWdodENvbG9ycyIsImRhcmtDb2xvcnMiLCJvdXQiLCJyZXZlcnNlIiwibWFwIiwiaW5kZXgiLCJnZXRDb2xvcnMiLCJjb2xvcnNKc29uIiwic2VsZWN0ZWRDb2xvcnMiLCJnZW5lcmF0ZWQiLCJPYmplY3QiLCJ2YWx1ZXMiLCJpZCIsImJhc2VDb2xvciIsIm5ldXRyYWxzIiwibmV1dHJhbENvbG9ycyIsInN1cmZhY2VOZXV0cmFsQmFzZSIsInN1cmZhY2VOZXV0cmFsQ29sb3JzIiwic3VyZmFjZU5ldXRyYWwiLCJzaGlmdCIsInBvcCIsInN1cmZhY2VEaXZpZGVyQmFzZSIsInN1cmZhY2VEaXZpZGVyQ29sb3JzIiwic3VyZmFjZURpdmlkZXIiLCJpc0hleCIsInRlc3QiLCJoZXhUb0hTTCIsIkgiLCJjbWluIiwibWluIiwiY21heCIsIm1heCIsImRlbHRhIiwiaCIsInMiLCJsIiwiYWJzIiwiSFNMVG9IZXgiLCJjIiwieCIsIm0iLCJnZXROZXV0cmFsQmFzZUNvbG9yc0Zyb21CcmFuZFByaW1hcnlIZXgiLCJnZXRQcmltYXJ5Q29sb3JzRnJvbUJyYW5kUHJpbWFyeUhleCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztJQUFNQSxLLEdBQ0wsZUFBWUMsS0FBWixFQUFtQkMsSUFBbkIsRUFBeUI7QUFBQTs7QUFDeEIsT0FBS0MsR0FBTCxHQUFXRixLQUFYO0FBQ0EsT0FBS0csR0FBTCxHQUFXQyxRQUFRLENBQUNKLEtBQUQsQ0FBbkI7QUFDQSxPQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxDOztBQUdGLElBQU1DLEdBQUcsR0FBRyxTQUFOQSxHQUFNLENBQUNGLEtBQUQsRUFBVztBQUN0QixNQUFNSyxXQUFXLEdBQUdMLEtBQUssQ0FBQ00sUUFBTixDQUFlLEVBQWYsQ0FBcEI7QUFDQSxTQUFPRCxXQUFXLENBQUNFLE1BQVosS0FBdUIsQ0FBdkIsY0FBK0JGLFdBQS9CLElBQStDQSxXQUF0RDtBQUNBLENBSEQ7O0FBS0EsSUFBTUcsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFDQyxNQUFELEVBQVNDLE1BQVQsRUFBaUJDLEtBQWpCLEVBQTJCO0FBQ2pEQSxPQUFLLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDQyxLQUFMLENBQVdGLEtBQUssR0FBRyxHQUFuQixJQUEwQixHQUEzQixFQUFnQ0csT0FBaEMsQ0FBd0MsQ0FBeEMsQ0FBUjtBQUVBLE1BQU1DLENBQUMsR0FBR0gsSUFBSSxDQUFDSSxJQUFMLENBQ1RDLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUSxTQUFQLENBQWlCLENBQWpCLEVBQW9CLENBQXBCLENBQUQsRUFBeUIsRUFBekIsQ0FBUixHQUF1Q1AsS0FBdkMsR0FDQ00sUUFBUSxDQUFDUixNQUFNLENBQUNTLFNBQVAsQ0FBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsQ0FBRCxFQUF5QixFQUF6QixDQUFSLElBQXdDLElBQUlQLEtBQTVDLENB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QUlBLENBQUMsR0FBRyxFQUFKLEdBQVMsQ0FBVixHQUFlLENBQWYsR0FBbUJBLENBQUMsR0FBRyxFQUEzQjtBQUNBQyxHQUFDLEdBQUlBLENBQUMsR0FBRyxFQUFKLEdBQVMsR0FBVixHQUFpQixHQUFqQixHQUF1QkEsQ0FBQyxHQUFHLEVBQS9CO0FBRUEsU0FBT0UsUUFBUSxDQUFDSixDQUFELEVBQUlDLENBQUosRUFBT0MsQ0FBUCxDQUFmO0FBQ0QsQ0FSTTtBQVVBLElBQU1PLG1DQUFtQyxHQUFHLFNBQXRDQSxtQ0FBc0MsQ0FBQ2hGLEdBQUQsRUFBUztBQUFBLG1CQUMxQ2dFLFFBQVEsQ0FBQ2hFLEdBQUQsQ0FEa0M7QUFBQSxNQUNyRHVFLENBRHFELGNBQ3JEQSxDQURxRDtBQUFBLE1BQ2xEQyxDQURrRCxjQUNsREEsQ0FEa0Q7QUFBQSxNQUMvQ0MsQ0FEK0MsY0FDL0NBLENBRCtDOztBQUcxREYsR0FBQyxHQUFJQSxDQUFDLEdBQUcsRUFBSixHQUFTLENBQVYsR0FBZSxDQUFmLEdBQW1CQSxDQUFDLEdBQUcsRUFBM0I7QUFDQUMsR0FBQyxHQUFJQSxDQUFDLEdBQUcsRUFBSixHQUFTLEdBQVYsR0FBaUIsR0FBakIsR0FBdUJBLENBQUMsR0FBRyxFQUEvQjtBQUNBQyxHQUFDLEdBQUlBLENBQUMsR0FBRyxFQUFKLEdBQVMsR0FBVixHQUFpQixHQUFqQixHQUF1QkEsQ0FBQyxHQUFHLEVBQS9CO0FBRUEsU0FBT0UsUUFBUSxDQUFDSixDQUFELEVBQUlDLENBQUosRUFBT0MsQ0FBUCxDQUFmO0FBQ0QsQ0FSTSIsImZpbGUiOiIuL2xpYi9jb2xvci1nZW5lcmF0b3IvZ2VuZXJhdGVDb2xvcnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBDb2xvciB7XG5cdGNvbnN0cnVjdG9yKGNvbG9yLCBuYW1lKSB7XG5cdFx0dGhpcy5oZXggPSBjb2xvcjtcblx0XHR0aGlzLnJnYiA9IGhleFRvUmdiKGNvbG9yKTtcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHR9XG59XG5cbmNvbnN0IGhleCA9IChjb2xvcikgPT4ge1xuXHRjb25zdCBjb2xvclN0cmluZyA9IGNvbG9yLnRvU3RyaW5nKDE2KTtcblx0cmV0dXJuIGNvbG9yU3RyaW5nLmxlbmd0aCA9PT0gMSA/IGAwJHtjb2xvclN0cmluZ31gIDogY29sb3JTdHJpbmc7XG59O1xuXG5jb25zdCBjYWxjdWxhdGVDb2xvciA9IChjb2xvcjEsIGNvbG9yMiwgcmF0aW8pID0+IHtcblx0cmF0aW8gPSAoTWF0aC5yb3VuZChyYXRpbyAqIDEwMCkgLyAxMDApLnRvRml4ZWQoMik7XG5cblx0Y29uc3QgciA9IE1hdGguY2VpbChcblx0XHRwYXJzZUludChjb2xvcjIuc3Vic3RyaW5nKDAsIDIpLCAxNikgKiByYXRpbyArXG5cdFx0XHRwYXJzZUludChjb2xvcjEuc3Vic3RyaW5nKDAsIDIpLCAxNikgKiAoMSAtIHJhdGlvKVxuXHQpO1xuXHRjb25zdCBnID0gTWF0aC5jZWlsKFxuXHRcdHBhcnNlSW50KGNvbG9yMi5zdWJzdHJpbmcoMiwgNCksIDE2KSAqIHJhdGlvICtcblx0XHRcdHBhcnNlSW50KGNvbG9yMS5zdWJzdHJpbmcoMiwgNCksIDE2KSAqICgxIC0gcmF0aW8pXG5cdCk7XG5cdGNvbnN0IGIgPSBNYXRoLmNlaWwoXG5cdFx0cGFyc2VJbnQoY29sb3IyLnN1YnN0cmluZyg0LCA2KSwgMTYpICogcmF0aW8gK1xuXHRcdFx0cGFyc2VJbnQoY29sb3IxLnN1YnN0cmluZyg0LCA2KSwgMTYpICogKDEgLSByYXRpbylcblx0KTtcblxuXHRyZXR1cm4gaGV4KHIpICsgaGV4KGcpICsgaGV4KGIpO1xufTtcblxuY29uc3QgaGV4VG9SZ2IgPSAoaGV4KSA9PiB7XG5cdGNvbnN0IHIgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDEsIDMpLCAxNik7XG5cdGNvbnN0IGcgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDMsIDUpLCAxNik7XG5cdGNvbnN0IGIgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDUsIDcpLCAxNik7XG5cblx0cmV0dXJuIGAke3J9LCR7Z30sJHtifWA7XG59O1xuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVDb2xvcnMgPSAoY29sb3IxLCBjb2xvcjIsIHZhcmlhdGlvbnMpID0+IHtcblx0aWYgKCF2YXJpYXRpb25zKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0Y29sb3IxID0gY29sb3IxLnN0YXJ0c1dpdGgoJyMnKSA/IGNvbG9yMSA6IGAjJHtjb2xvcjF9YDtcblx0Y29sb3IyID0gY29sb3IyLnN0YXJ0c1dpdGgoJyMnKSA/IGNvbG9yMiA6IGAjJHtjb2xvcjJ9YDtcblx0bGV0IHBlcmNlbnRhZ2UgPSAxIC8gdmFyaWF0aW9ucztcblx0Y29uc3QgbnVtYmVyT2ZMb29wcyA9IDEgLyBwZXJjZW50YWdlIC0gMTtcblxuXHRsZXQgY29sb3JzID0gW107XG5cblx0Zm9yIChsZXQgaSA9IDE7IGkgPD0gbnVtYmVyT2ZMb29wczsgaSsrKSB7XG5cdFx0Y29sb3JzID0gW1xuXHRcdFx0Li4uY29sb3JzLFxuXHRcdFx0JyMnICsgY2FsY3VsYXRlQ29sb3IoY29sb3IxLnNsaWNlKDEpLCBjb2xvcjIuc2xpY2UoMSksIGkgKiBwZXJjZW50YWdlKSxcblx0XHRdO1xuXHR9XG5cblx0cmV0dXJuIGNvbG9ycztcbn07XG5cbmNvbnN0IGdlbmVyYXRlQ29sb3JSYW5nZSA9IChcblx0Y29sb3IsXG5cdGxpZ2h0VmFyaWF0aW9ucyxcblx0bGlnaHRQZXJjZW50YWdlLFxuXHRkYXJrVmFyaWF0aW9ucyxcblx0ZGFya1BlcmNlbnRhZ2UsXG5cdGhvb2ssXG5cdHN0YXJ0SW5kZXgsXG4gIGluY2x1ZGVFbmRzLFxuICBpc0RhcmtcbikgPT4ge1xuXHRjb25zdCBmaXJzdENvbG9yID0gY2FsY3VsYXRlQ29sb3IoXG5cdFx0J2ZmZmZmZicsXG5cdFx0Y29sb3Iuc2xpY2UoMSksXG5cdFx0MSAtIGxpZ2h0UGVyY2VudGFnZVxuXHQpO1xuXHRjb25zdCBsYXN0Q29sb3IgPSBjYWxjdWxhdGVDb2xvcihjb2xvci5zbGljZSgxKSwgJzAwMDAwMCcsIGRhcmtQZXJjZW50YWdlKTtcblx0Y29uc3QgbGlnaHRDb2xvcnMgPSBnZW5lcmF0ZUNvbG9ycyhmaXJzdENvbG9yLCBjb2xvciwgbGlnaHRWYXJpYXRpb25zKTtcblx0Y29uc3QgZGFya0NvbG9ycyA9IGdlbmVyYXRlQ29sb3JzKGNvbG9yLCBsYXN0Q29sb3IsIGRhcmtWYXJpYXRpb25zKTtcblxuXHRsZXQgb3V0ID0gW107XG5cdGlmIChsaWdodFZhcmlhdGlvbnMpIHtcblx0XHRvdXQgPSBbYCMke2ZpcnN0Q29sb3J9YCwgLi4ubGlnaHRDb2xvcnMsIC4uLm91dF07XG5cdH1cblxuXHRvdXQgPSBbLi4ub3V0LCBjb2xvcl07XG5cblx0aWYgKGRhcmtWYXJpYXRpb25zKSB7XG5cdFx0b3V0ID0gWy4uLm91dCwgLi4uZGFya0NvbG9ycywgYCMke2xhc3RDb2xvcn1gXTtcblx0fVxuXG5cdGlmIChpbmNsdWRlRW5kcykge1xuXHRcdG91dCA9IFtgI2ZmZmZmZmAsIC4uLm91dCwgYCMwMDAwMDBgXTtcbiAgfVxuXG4gIGlmIChpc0RhcmspIHtcbiAgICBvdXQucmV2ZXJzZSgpO1xuICB9XG5cblx0cmV0dXJuIG91dC5tYXAoKGNvbG9yLCBpbmRleCkgPT4ge1xuXHRcdGNvbnN0IG5hbWUgPSBgLS0ke2hvb2t9LSR7aW5kZXggKyAoc3RhcnRJbmRleCA/IHN0YXJ0SW5kZXggOiAwKX1gO1xuXHRcdHJldHVybiBuZXcgQ29sb3IoY29sb3IsIG5hbWUpO1xuXHR9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDb2xvcnMgPSAoY29sb3JzSnNvbiwgc2VsZWN0ZWRDb2xvcnMsIGlzRGFyaykgPT4ge1xuXHRjb25zdCBnZW5lcmF0ZWQgPSB7fTtcblxuXHRmb3IgKGNvbnN0IGNvbG9yIG9mIE9iamVjdC52YWx1ZXMoY29sb3JzSnNvbi5jb2xvcnMpKSB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0aWQsXG5cdFx0XHRsaWdodFZhcmlhdGlvbnMsXG5cdFx0XHRsaWdodFBlcmNlbnRhZ2UsXG5cdFx0XHRkYXJrVmFyaWF0aW9ucyxcblx0XHRcdGRhcmtQZXJjZW50YWdlLFxuXHRcdFx0aG9vayxcblx0XHRcdHN0YXJ0SW5kZXgsXG5cdFx0fSA9IGNvbG9yO1xuXHRcdGNvbnN0IGJhc2VDb2xvciA9IHNlbGVjdGVkQ29sb3JzW2lkXTtcblxuXHRcdGlmIChcblx0XHRcdCFiYXNlQ29sb3IgfHxcblx0XHRcdGJhc2VDb2xvci5sZW5ndGggIT09IDcgfHxcblx0XHRcdGlkID09PSAnc3VyZmFjZU5ldXRyYWwnIHx8XG5cdFx0XHRpZCA9PT0gJ3N1cmZhY2VEaXZpZGVyJ1xuXHRcdCkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Z2VuZXJhdGVkW2lkXSA9IGdlbmVyYXRlQ29sb3JSYW5nZShcblx0XHRcdGJhc2VDb2xvcixcblx0XHRcdGxpZ2h0VmFyaWF0aW9ucyxcblx0XHRcdGxpZ2h0UGVyY2VudGFnZSxcblx0XHRcdGRhcmtWYXJpYXRpb25zLFxuXHRcdFx0ZGFya1BlcmNlbnRhZ2UsXG5cdFx0XHRob29rLFxuXHRcdFx0c3RhcnRJbmRleCxcbiAgICAgIGlkID09PSAnbmV1dHJhbHMnID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgaXNEYXJrICYmIGlkID09PSAnbmV1dHJhbHMnID8gdHJ1ZSA6IGZhbHNlXG4gICAgKTtcblx0fVxuXG5cdGlmIChnZW5lcmF0ZWQubmV1dHJhbHMpIHtcblx0XHRjb25zdCBuZXV0cmFsQ29sb3JzID0gZ2VuZXJhdGVkLm5ldXRyYWxzO1xuXG5cdFx0Y29uc3Qgc3VyZmFjZU5ldXRyYWxCYXNlID0gbmV1dHJhbENvbG9yc1s0XS5oZXg7XG5cdFx0Y29uc3Qgc3VyZmFjZU5ldXRyYWxDb2xvcnMgPSBnZW5lcmF0ZUNvbG9yUmFuZ2UoXG5cdFx0XHRzdXJmYWNlTmV1dHJhbEJhc2UsXG5cdFx0XHRjb2xvcnNKc29uLmNvbG9ycy5zdXJmYWNlTmV1dHJhbC5saWdodFZhcmlhdGlvbnMsXG5cdFx0XHRjb2xvcnNKc29uLmNvbG9ycy5zdXJmYWNlTmV1dHJhbC5saWdodFBlcmNlbnRhZ2UsXG5cdFx0XHRjb2xvcnNKc29uLmNvbG9ycy5zdXJmYWNlTmV1dHJhbC5kYXJrVmFyaWF0aW9ucyxcblx0XHRcdGNvbG9yc0pzb24uY29sb3JzLnN1cmZhY2VOZXV0cmFsLmRhcmtQZXJjZW50YWdlLFxuXHRcdFx0Y29sb3JzSnNvbi5jb2xvcnMuc3VyZmFjZU5ldXRyYWwuaG9vayxcblx0XHRcdGNvbG9yc0pzb24uY29sb3JzLnN1cmZhY2VOZXV0cmFsLnN0YXJ0SW5kZXgsXG4gICAgICBmYWxzZSxcbiAgICAgIGlzRGFya1xuICAgICk7XG5cblx0XHRpc0RhcmsgPyBzdXJmYWNlTmV1dHJhbENvbG9ycy5zaGlmdCgpIDogc3VyZmFjZU5ldXRyYWxDb2xvcnMucG9wKCk7XG5cdFx0Z2VuZXJhdGVkLnN1cmZhY2VOZXV0cmFsID0gc3VyZmFjZU5ldXRyYWxDb2xvcnM7XG5cblx0XHRjb25zdCBzdXJmYWNlRGl2aWRlckJhc2UgPSBuZXV0cmFsQ29sb3JzWzhdLmhleDtcblx0XHRjb25zdCBzdXJmYWNlRGl2aWRlckNvbG9ycyA9IGdlbmVyYXRlQ29sb3JSYW5nZShcblx0XHRcdHN1cmZhY2VEaXZpZGVyQmFzZSxcblx0XHRcdGNvbG9yc0pzb24uY29sb3JzLnN1cmZhY2VEaXZpZGVyLmxpZ2h0VmFyaWF0aW9ucyxcblx0XHRcdGNvbG9yc0pzb24uY29sb3JzLnN1cmZhY2VEaXZpZGVyLmxpZ2h0UGVyY2VudGFnZSxcblx0XHRcdGNvbG9yc0pzb24uY29sb3JzLnN1cmZhY2VEaXZpZGVyLmRhcmtWYXJpYXRpb25zLFxuXHRcdFx0Y29sb3JzSnNvbi5jb2xvcnMuc3VyZmFjZURpdmlkZXIuZGFya1BlcmNlbnRhZ2UsXG5cdFx0XHRjb2xvcnNKc29uLmNvbG9ycy5zdXJmYWNlRGl2aWRlci5ob29rLFxuXHRcdFx0Y29sb3JzSnNvbi5jb2xvcnMuc3VyZmFjZURpdmlkZXIuc3RhcnRJbmRleCxcbiAgICAgIGZhbHNlLFxuICAgICAgaXNEYXJrXG5cdFx0KTtcblx0XHRpc0RhcmsgPyBzdXJmYWNlRGl2aWRlckNvbG9ycy5zaGlmdCgpIDogc3VyZmFjZURpdmlkZXJDb2xvcnMucG9wKCk7XG5cdFx0Z2VuZXJhdGVkLnN1cmZhY2VEaXZpZGVyID0gc3VyZmFjZURpdmlkZXJDb2xvcnM7XG5cdH1cblxuXHRyZXR1cm4gZ2VuZXJhdGVkO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzSGV4ID0gKGhleCkgPT4ge1xuICByZXR1cm4gL14jWzAtOUEtRl17Nn0kL2kudGVzdChoZXgpO1xufVxuXG5leHBvcnQgY29uc3QgaGV4VG9IU0wgPSAoSCkgPT4gIHtcbiAgLy8gQ29udmVydCBoZXggdG8gUkdCIGZpcnN0XG4gIGxldCByID0gMCwgZyA9IDAsIGIgPSAwO1xuICBpZiAoSC5sZW5ndGggPT0gNCkge1xuICAgIHIgPSBcIjB4XCIgKyBIWzFdICsgSFsxXTtcbiAgICBnID0gXCIweFwiICsgSFsyXSArIEhbMl07XG4gICAgYiA9IFwiMHhcIiArIEhbM10gKyBIWzNdO1xuICB9IGVsc2UgaWYgKEgubGVuZ3RoID09IDcpIHtcbiAgICByID0gXCIweFwiICsgSFsxXSArIEhbMl07XG4gICAgZyA9IFwiMHhcIiArIEhbM10gKyBIWzRdO1xuICAgIGIgPSBcIjB4XCIgKyBIWzVdICsgSFs2XTtcbiAgfVxuICAvLyBUaGVuIHRvIEhTTFxuICByIC89IDI1NTtcbiAgZyAvPSAyNTU7XG4gIGIgLz0gMjU1O1xuICBsZXQgY21pbiA9IE1hdGgubWluKHIsZyxiKSxcbiAgICAgIGNtYXggPSBNYXRoLm1heChyLGcsYiksXG4gICAgICBkZWx0YSA9IGNtYXggLSBjbWluLFxuICAgICAgaCA9IDAsXG4gICAgICBzID0gMCxcbiAgICAgIGwgPSAwO1xuXG4gIGlmIChkZWx0YSA9PSAwKVxuICAgIGggPSAwO1xuICBlbHNlIGlmIChjbWF4ID09IHIpXG4gICAgaCA9ICgoZyAtIGIpIC8gZGVsdGEpICUgNjtcbiAgZWxzZSBpZiAoY21heCA9PSBnKVxuICAgIGggPSAoYiAtIHIpIC8gZGVsdGEgKyAyO1xuICBlbHNlXG4gICAgaCA9IChyIC0gZykgLyBkZWx0YSArIDQ7XG5cbiAgaCA9IE1hdGgucm91bmQoaCAqIDYwKTtcblxuICBpZiAoaCA8IDApXG4gICAgaCArPSAzNjA7XG5cbiAgbCA9IChjbWF4ICsgY21pbikgLyAyO1xuICBzID0gZGVsdGEgPT0gMCA/IDAgOiBkZWx0YSAvICgxIC0gTWF0aC5hYnMoMiAqIGwgLSAxKSk7XG4gIHMgPSArKHMgKiAxMDApLnRvRml4ZWQoMSk7XG4gIGwgPSArKGwgKiAxMDApLnRvRml4ZWQoMSk7XG5cbiAgLy8gcmV0dXJuIFwiaHNsKFwiICsgTWF0aC5yb3VuZChoKSArIFwiLFwiICsgTWF0aC5yb3VuZChzKSArIFwiLFwiICsgTWF0aC5yb3VuZChsKSArIFwiKVwiO1xuICByZXR1cm4ge1xuICAgIGg6IE1hdGgucm91bmQoaCksXG4gICAgczogTWF0aC5yb3VuZChzKSxcbiAgICBsOiBNYXRoLnJvdW5kKGwpXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEhTTFRvSGV4ID0gKGgscyxsKSA9PiB7XG4gIHMgLz0gMTAwO1xuICBsIC89IDEwMDtcblxuICBsZXQgYyA9ICgxIC0gTWF0aC5hYnMoMiAqIGwgLSAxKSkgKiBzLFxuICAgICAgeCA9IGMgKiAoMSAtIE1hdGguYWJzKChoIC8gNjApICUgMiAtIDEpKSxcbiAgICAgIG0gPSBsIC0gYy8yLFxuICAgICAgciA9IDAsXG4gICAgICBnID0gMCxcbiAgICAgIGIgPSAwO1xuXG4gIGlmICgwIDw9IGggJiYgaCA8IDYwKSB7XG4gICAgciA9IGM7IGcgPSB4OyBiID0gMDtcbiAgfSBlbHNlIGlmICg2MCA8PSBoICYmIGggPCAxMjApIHtcbiAgICByID0geDsgZyA9IGM7IGIgPSAwO1xuICB9IGVsc2UgaWYgKDEyMCA8PSBoICYmIGggPCAxODApIHtcbiAgICByID0gMDsgZyA9IGM7IGIgPSB4O1xuICB9IGVsc2UgaWYgKDE4MCA8PSBoICYmIGggPCAyNDApIHtcbiAgICByID0gMDsgZyA9IHg7IGIgPSBjO1xuICB9IGVsc2UgaWYgKDI0MCA8PSBoICYmIGggPCAzMDApIHtcbiAgICByID0geDsgZyA9IDA7IGIgPSBjO1xuICB9IGVsc2UgaWYgKDMwMCA8PSBoICYmIGggPCAzNjApIHtcbiAgICByID0gYzsgZyA9IDA7IGIgPSB4O1xuICB9XG4gIC8vIEhhdmluZyBvYnRhaW5lZCBSR0IsIGNvbnZlcnQgY2hhbm5lbHMgdG8gaGV4XG4gIHIgPSBNYXRoLnJvdW5kKChyICsgbSkgKiAyNTUpLnRvU3RyaW5nKDE2KTtcbiAgZyA9IE1hdGgucm91bmQoKGcgKyBtKSAqIDI1NSkudG9TdHJpbmcoMTYpO1xuICBiID0gTWF0aC5yb3VuZCgoYiArIG0pICogMjU1KS50b1N0cmluZygxNik7XG5cbiAgLy8gUHJlcGVuZCAwcywgaWYgbmVjZXNzYXJ5XG4gIGlmIChyLmxlbmd0aCA9PSAxKVxuICAgIHIgPSBcIjBcIiArIHI7XG4gIGlmIChnLmxlbmd0aCA9PSAxKVxuICAgIGcgPSBcIjBcIiArIGc7XG4gIGlmIChiLmxlbmd0aCA9PSAxKVxuICAgIGIgPSBcIjBcIiArIGI7XG5cbiAgcmV0dXJuIFwiI1wiICsgciArIGcgKyBiO1xufVxuXG5cblxuZXhwb3J0IGNvbnN0IGdldE5ldXRyYWxCYXNlQ29sb3JzRnJvbUJyYW5kUHJpbWFyeUhleCA9IChoZXgpID0+IHtcbiAgbGV0IHtoLCBzLCBsfSA9IGhleFRvSFNMKGhleCk7XG5cbiAgaCA9IChoICsgMiA+IDM2MCkgPyAzNjAgOiBoICsgMjtcbiAgcyA9IChzIC0gMTIgPCAwKSA/IDAgOiBzIC0gMTI7XG4gIGwgPSAobCArIDExID4gMTAwKSA/IDEwMCA6IGwgKyAxMTtcblxuICByZXR1cm4gSFNMVG9IZXgoaCwgcywgbCk7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRQcmltYXJ5Q29sb3JzRnJvbUJyYW5kUHJpbWFyeUhleCA9IChoZXgpID0+IHtcbiAgbGV0IHtoLCBzLCBsfSA9IGhleFRvSFNMKGhleCk7XG5cbiAgaCA9IChoIC0gMTkgPCAwKSA/IDAgOiBoIC0gMTk7XG4gIHMgPSAocyArIDQxID4gMTAwKSA/IDEwMCA6IHMgKyA0MTtcbiAgbCA9IChsICsgMTEgPiAxMDApID8gMTAwIDogbCArIDExO1xuXG4gIHJldHVybiBIU0xUb0hleChoLCBzLCBsKTtcbn1cblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./lib/color-generator/generateColors.js\n");

/***/ })

})