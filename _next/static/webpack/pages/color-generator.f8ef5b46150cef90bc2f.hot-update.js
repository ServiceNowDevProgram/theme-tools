webpackHotUpdate_N_E("pages/color-generator",{

/***/ "./lib/color-generator/generateColors.js":
/*!***********************************************!*\
  !*** ./lib/color-generator/generateColors.js ***!
  \***********************************************/
/*! exports provided: generateColors, getColors, isHex, hexToHSL, HSLToHex, getNeutralBaseColorsFromBrandPrimaryHex, getPrimaryColorsFromBrandPrimaryHex, getSurfaceBrandColorsFromPrimaryHex, getChromeBrandColorsFromPrimaryHex, getChromeDividerColorsFromPrimaryHex, getInteractiveColorsFromPrimaryHex, getFocusColorsFromPrimaryHex, getSecondaryColorsFromSecondaryHex, getSelectionPrimaryFromSecondaryHex, getSelectionSecondaryFromSecondaryHex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateColors\", function() { return generateColors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getColors\", function() { return getColors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isHex\", function() { return isHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hexToHSL\", function() { return hexToHSL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HSLToHex\", function() { return HSLToHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getNeutralBaseColorsFromBrandPrimaryHex\", function() { return getNeutralBaseColorsFromBrandPrimaryHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPrimaryColorsFromBrandPrimaryHex\", function() { return getPrimaryColorsFromBrandPrimaryHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSurfaceBrandColorsFromPrimaryHex\", function() { return getSurfaceBrandColorsFromPrimaryHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getChromeBrandColorsFromPrimaryHex\", function() { return getChromeBrandColorsFromPrimaryHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getChromeDividerColorsFromPrimaryHex\", function() { return getChromeDividerColorsFromPrimaryHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getInteractiveColorsFromPrimaryHex\", function() { return getInteractiveColorsFromPrimaryHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFocusColorsFromPrimaryHex\", function() { return getFocusColorsFromPrimaryHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSecondaryColorsFromSecondaryHex\", function() { return getSecondaryColorsFromSecondaryHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSelectionPrimaryFromSecondaryHex\", function() { return getSelectionPrimaryFromSecondaryHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSelectionSecondaryFromSecondaryHex\", function() { return getSelectionSecondaryFromSecondaryHex; });\n/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n\n\n\nvar Color = function Color(color, name) {\n  Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, Color);\n\n  this.hex = color;\n  this.rgb = hexToRgb(color);\n  this.name = name;\n};\n\nvar hex = function hex(color) {\n  var colorString = color.toString(16);\n  return colorString.length === 1 ? \"0\".concat(colorString) : colorString;\n};\n\nvar calculateColor = function calculateColor(color1, color2, ratio) {\n  ratio = (Math.round(ratio * 100) / 100).toFixed(2);\n  var r = Math.ceil(parseInt(color2.substring(0, 2), 16) * ratio + parseInt(color1.substring(0, 2), 16) * (1 - ratio));\n  var g = Math.ceil(parseInt(color2.substring(2, 4), 16) * ratio + parseInt(color1.substring(2, 4), 16) * (1 - ratio));\n  var b = Math.ceil(parseInt(color2.substring(4, 6), 16) * ratio + parseInt(color1.substring(4, 6), 16) * (1 - ratio));\n  return hex(r) + hex(g) + hex(b);\n};\n\nvar hexToRgb = function hexToRgb(hex) {\n  var r = parseInt(hex.substring(1, 3), 16);\n  var g = parseInt(hex.substring(3, 5), 16);\n  var b = parseInt(hex.substring(5, 7), 16);\n  return \"\".concat(r, \",\").concat(g, \",\").concat(b);\n};\n\nvar generateColors = function generateColors(color1, color2, variations) {\n  if (!variations) {\n    return [];\n  }\n\n  color1 = color1.startsWith('#') ? color1 : \"#\".concat(color1);\n  color2 = color2.startsWith('#') ? color2 : \"#\".concat(color2);\n  var percentage = 1 / variations;\n  var numberOfLoops = 1 / percentage - 1;\n  var colors = [];\n\n  for (var i = 1; i <= numberOfLoops; i++) {\n    colors = [].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(colors), ['#' + calculateColor(color1.slice(1), color2.slice(1), i * percentage)]);\n  }\n\n  return colors;\n};\n\nvar generateColorRange = function generateColorRange(color, lightVariations, lightPercentage, darkVariations, darkPercentage, hook, startIndex, includeEnds, isDark) {\n  var firstColor = calculateColor('ffffff', color.slice(1), 1 - lightPercentage);\n  var lastColor = calculateColor(color.slice(1), '000000', darkPercentage);\n  var lightColors = generateColors(firstColor, color, lightVariations);\n  var darkColors = generateColors(color, lastColor, darkVariations);\n  var out = [];\n\n  if (lightVariations) {\n    out = [\"#\".concat(firstColor)].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(lightColors), Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(out));\n  }\n\n  out = [].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(out), [color]);\n\n  if (darkVariations) {\n    out = [].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(out), Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(darkColors), [\"#\".concat(lastColor)]);\n  }\n\n  if (includeEnds) {\n    out = [\"#ffffff\"].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(out), [\"#000000\"]);\n  }\n\n  if (isDark) {\n    out.reverse();\n  }\n\n  console.log(isDark);\n  console.log('color', out);\n  console.log(startIndex);\n  return out.map(function (color, index) {\n    var name = \"--\".concat(hook, \"-\").concat(index + (startIndex ? startIndex : 0));\n    return new Color(color, name);\n  });\n};\n\nvar getColors = function getColors(colorsJson, selectedColors, isDark) {\n  var generated = {};\n\n  for (var _i = 0, _Object$values = Object.values(colorsJson.colors); _i < _Object$values.length; _i++) {\n    var color = _Object$values[_i];\n    var id = color.id,\n        lightVariations = color.lightVariations,\n        lightPercentage = color.lightPercentage,\n        darkVariations = color.darkVariations,\n        darkPercentage = color.darkPercentage,\n        hook = color.hook,\n        startIndex = color.startIndex;\n    var baseColor = selectedColors[id];\n\n    if (!baseColor || baseColor.length !== 7 || id === 'surfaceNeutral' || id === 'surfaceDivider') {\n      continue;\n    }\n\n    generated[id] = generateColorRange(baseColor, lightVariations, lightPercentage, darkVariations, darkPercentage, hook, startIndex, id === 'neutrals' ? true : false, isDark && id === 'neutrals' ? true : false);\n  }\n\n  if (generated.neutrals) {\n    var neutralColors = generated.neutrals;\n    var surfaceNeutralBase = neutralColors[4].hex;\n    var surfaceNeutralColors = generateColorRange(surfaceNeutralBase, colorsJson.colors.surfaceNeutral.lightVariations, colorsJson.colors.surfaceNeutral.lightPercentage, colorsJson.colors.surfaceNeutral.darkVariations, colorsJson.colors.surfaceNeutral.darkPercentage, colorsJson.colors.surfaceNeutral.hook, colorsJson.colors.surfaceNeutral.startIndex, false, isDark);\n    isDark ? surfaceNeutralColors.shift() : surfaceNeutralColors.pop();\n    generated.surfaceNeutral = surfaceNeutralColors;\n    var surfaceDividerBase = neutralColors[8].hex;\n    var surfaceDividerColors = generateColorRange(surfaceDividerBase, colorsJson.colors.surfaceDivider.lightVariations, colorsJson.colors.surfaceDivider.lightPercentage, colorsJson.colors.surfaceDivider.darkVariations, colorsJson.colors.surfaceDivider.darkPercentage, colorsJson.colors.surfaceDivider.hook, colorsJson.colors.surfaceDivider.startIndex, false, isDark);\n    isDark ? surfaceDividerColors.shift() : surfaceDividerColors.pop();\n    generated.surfaceDivider = surfaceDividerColors;\n  }\n\n  return generated;\n};\nvar isHex = function isHex(hex) {\n  return /^#[0-9A-F]{6}$/i.test(hex);\n};\nvar hexToHSL = function hexToHSL(H) {\n  // Convert hex to RGB first\n  var r = 0,\n      g = 0,\n      b = 0;\n\n  if (H.length == 4) {\n    r = '0x' + H[1] + H[1];\n    g = '0x' + H[2] + H[2];\n    b = '0x' + H[3] + H[3];\n  } else if (H.length == 7) {\n    r = '0x' + H[1] + H[2];\n    g = '0x' + H[3] + H[4];\n    b = '0x' + H[5] + H[6];\n  } // Then to HSL\n\n\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  var cmin = Math.min(r, g, b),\n      cmax = Math.max(r, g, b),\n      delta = cmax - cmin,\n      h = 0,\n      s = 0,\n      l = 0;\n  if (delta == 0) h = 0;else if (cmax == r) h = (g - b) / delta % 6;else if (cmax == g) h = (b - r) / delta + 2;else h = (r - g) / delta + 4;\n  h = Math.round(h * 60);\n  if (h < 0) h += 360;\n  l = (cmax + cmin) / 2;\n  s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1); // return \"hsl(\" + Math.round(h) + \",\" + Math.round(s) + \",\" + Math.round(l) + \")\";\n\n  return {\n    h: Math.round(h),\n    s: Math.round(s),\n    l: Math.round(l)\n  };\n};\nvar HSLToHex = function HSLToHex(h, s, l) {\n  s /= 100;\n  l /= 100;\n  var c = (1 - Math.abs(2 * l - 1)) * s,\n      x = c * (1 - Math.abs(h / 60 % 2 - 1)),\n      m = l - c / 2,\n      r = 0,\n      g = 0,\n      b = 0;\n\n  if (0 <= h && h < 60) {\n    r = c;\n    g = x;\n    b = 0;\n  } else if (60 <= h && h < 120) {\n    r = x;\n    g = c;\n    b = 0;\n  } else if (120 <= h && h < 180) {\n    r = 0;\n    g = c;\n    b = x;\n  } else if (180 <= h && h < 240) {\n    r = 0;\n    g = x;\n    b = c;\n  } else if (240 <= h && h < 300) {\n    r = x;\n    g = 0;\n    b = c;\n  } else if (300 <= h && h < 360) {\n    r = c;\n    g = 0;\n    b = x;\n  } // Having obtained RGB, convert channels to hex\n\n\n  r = Math.round((r + m) * 255).toString(16);\n  g = Math.round((g + m) * 255).toString(16);\n  b = Math.round((b + m) * 255).toString(16); // Prepend 0s, if necessary\n\n  if (r.length == 1) r = '0' + r;\n  if (g.length == 1) g = '0' + g;\n  if (b.length == 1) b = '0' + b;\n  return '#' + r + g + b;\n};\n_c = HSLToHex;\nvar getNeutralBaseColorsFromBrandPrimaryHex = function getNeutralBaseColorsFromBrandPrimaryHex(hex) {\n  var _hexToHSL = hexToHSL(hex),\n      h = _hexToHSL.h,\n      s = _hexToHSL.s,\n      l = _hexToHSL.l; // h = (h + 53 > 360) ? 360 : h + 53;\n\n\n  s = s - 25 < 0 ? 0 : s - 25;\n  l = l - 18 < 0 ? 0 : l - 18;\n  return HSLToHex(h, s, l);\n};\nvar getPrimaryColorsFromBrandPrimaryHex = function getPrimaryColorsFromBrandPrimaryHex(hex) {\n  // let {h, s, l} = hexToHSL(hex);\n  // h = (h - 19 < 0) ? 0 : h - 19;\n  // s = (s + 41 > 100) ? 100 : s + 41;\n  // l = (l + 11 > 100) ? 100 : l + 11;\n  // return HSLToHex(h, s, l);\n  return hex;\n};\nvar getSurfaceBrandColorsFromPrimaryHex = function getSurfaceBrandColorsFromPrimaryHex(hex) {\n  var _hexToHSL2 = hexToHSL(hex),\n      h = _hexToHSL2.h,\n      s = _hexToHSL2.s,\n      l = _hexToHSL2.l; // h = (h + 53 > 360) ? 360 : h + 53;\n  // s = (s + 4 > 100) ? 100 : s + 4;\n\n\n  l = l + 27 > 100 ? 100 : l + 27;\n  return HSLToHex(h, s, l);\n};\nvar getChromeBrandColorsFromPrimaryHex = function getChromeBrandColorsFromPrimaryHex(hex) {\n  var _hexToHSL3 = hexToHSL(hex),\n      h = _hexToHSL3.h,\n      s = _hexToHSL3.s,\n      l = _hexToHSL3.l;\n\n  h = h - 2 < 0 ? 0 : h - 2;\n  s = s - 11 < 0 ? 0 : s - 11;\n  l = l + 13 > 100 ? 100 : l + 13;\n  return HSLToHex(h, s, l);\n};\nvar getChromeDividerColorsFromPrimaryHex = function getChromeDividerColorsFromPrimaryHex(hex) {\n  var _hexToHSL4 = hexToHSL(hex),\n      h = _hexToHSL4.h,\n      s = _hexToHSL4.s,\n      l = _hexToHSL4.l;\n\n  h = h - 2 < 0 ? 0 : h - 2;\n  l = l - 3 < 0 ? 0 : l - 3;\n  return HSLToHex(h, s, l);\n};\nvar getInteractiveColorsFromPrimaryHex = function getInteractiveColorsFromPrimaryHex(hex) {\n  var _hexToHSL5 = hexToHSL(hex),\n      h = _hexToHSL5.h,\n      s = _hexToHSL5.s,\n      l = _hexToHSL5.l; // h = (h - 2 < 0) ? 0 : h - 2;\n  // l = (l - 3 < 0) ? 0 : l - 3;\n\n\n  return HSLToHex(h, s, l);\n};\nvar getFocusColorsFromPrimaryHex = function getFocusColorsFromPrimaryHex(hex) {\n  var _hexToHSL6 = hexToHSL(hex),\n      h = _hexToHSL6.h,\n      s = _hexToHSL6.s,\n      l = _hexToHSL6.l; // h = (h - 2 < 0) ? 0 : h - 2;\n  // l = (l - 3 < 0) ? 0 : l - 3;\n\n\n  return HSLToHex(h, s, l);\n};\nvar getSecondaryColorsFromSecondaryHex = function getSecondaryColorsFromSecondaryHex(hex) {\n  var _hexToHSL7 = hexToHSL(hex),\n      h = _hexToHSL7.h,\n      s = _hexToHSL7.s,\n      l = _hexToHSL7.l; // h = (h + 33 > 360) ? 360 : h + 33;\n  // s = (s + 73 > 100) ? 100 : s + 73;\n  // l = (l - 33 < 30) ? 30 : l - 33;\n\n\n  return HSLToHex(h, s, l);\n};\nvar getSelectionPrimaryFromSecondaryHex = function getSelectionPrimaryFromSecondaryHex(hex) {\n  var _hexToHSL8 = hexToHSL(hex),\n      h = _hexToHSL8.h,\n      s = _hexToHSL8.s,\n      l = _hexToHSL8.l; // h = (h + 11 > 360) ? 360 : h + 11;\n  // s = (s + 57 > 100) ? 100 : s + 57;\n  // l = (l - 29 < 0) ? 0 : l - 29;\n\n\n  return HSLToHex(h, s, l);\n};\nvar getSelectionSecondaryFromSecondaryHex = function getSelectionSecondaryFromSecondaryHex(hex) {\n  var _hexToHSL9 = hexToHSL(hex),\n      h = _hexToHSL9.h,\n      s = _hexToHSL9.s,\n      l = _hexToHSL9.l;\n\n  h = h - 3 < 0 ? 0 : h - 3;\n  s = s - 85 < 0 ? 0 : s - 85;\n  l = l + 59 > 100 ? 100 : l + 59;\n  return HSLToHex(h, s, l);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"HSLToHex\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL2NvbG9yLWdlbmVyYXRvci9nZW5lcmF0ZUNvbG9ycy5qcz9kYWY1Il0sIm5hbWVzIjpbIkNvbG9yIiwiY29sb3IiLCJuYW1lIiwiaGV4IiwicmdiIiwiaGV4VG9SZ2IiLCJjb2xvclN0cmluZyIsInRvU3RyaW5nIiwibGVuZ3RoIiwiY2FsY3VsYXRlQ29sb3IiLCJjb2xvcjEiLCJjb2xvcjIiLCJyYXRpbyIsIk1hdGgiLCJyb3VuZCIsInRvRml4ZWQiLCJyIiwiY2VpbCIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwiZyIsImIiLCJnZW5lcmF0ZUNvbG9ycyIsInZhcmlhdGlvbnMiLCJzdGFydHNXaXRoIiwicGVyY2VudGFnZSIsIm51bWJlck9mTG9vcHMiLCJjb2xvcnMiLCJpIiwic2xpY2UiLCJnZW5lcmF0ZUNvbG9yUmFuZ2UiLCJsaWdodFZhcmlhdGlvbnMiLCJsaWdodFBlcmNlbnRhZ2UiLCJkYXJrVmFyaWF0aW9ucyIsImRhcmtQZXJjZW50YWdlIiwiaG9vayIsInN0YXJ0SW5kZXgiLCJpbmNsdWRlRW5kcyIsImlzRGFyayIsImZpcnN0Q29sb3IiLCJsYXN0Q29sb3IiLCJsaWdodENvbG9ycyIsImRhcmtDb2xvcnMiLCJvdXQiLCJyZXZlcnNlIiwiY29uc29sZSIsImxvZyIsIm1hcCIsImluZGV4IiwiZ2V0Q29sb3JzIiwiY29sb3JzSnNvbiIsInNlbGVjdGVkQ29sb3JzIiwiZ2VuZXJhdGVkIiwiT2JqZWN0IiwidmFsdWVzIiwiaWQiLCJiYXNlQ29sb3IiLCJuZXV0cmFscyIsIm5ldXRyYWxDb2xvcnMiLCJzdXJmYWNlTmV1dHJhbEJhc2UiLCJzdXJmYWNlTmV1dHJhbENvbG9ycyIsInN1cmZhY2VOZXV0cmFsIiwic2hpZnQiLCJwb3AiLCJzdXJmYWNlRGl2aWRlckJhc2UiLCJzdXJmYWNlRGl2aWRlckNvbG9ycyIsInN1cmZhY2VEaXZpZGVyIiwiaXNIZXgiLCJ0ZXN0IiwiaGV4VG9IU0wiLCJIIiwiY21pbiIsIm1pbiIsImNtYXgiLCJtYXgiLCJkZWx0YSIsImgiLCJzIiwibCIsImFicyIsIkhTTFRvSGV4IiwiYyIsIngiLCJtIiwiZ2V0TmV1dHJhbEJhc2VDb2xvcnNGcm9tQnJhbmRQcmltYXJ5SGV4IiwiZ2V0UHJpbWFyeUNvbG9yc0Zyb21CcmFuZFByaW1hcnlIZXgiLCJnZXRTdXJmYWNlQnJhbmRDb2xvcnNGcm9tUHJpbWFyeUhleCIsImdldENocm9tZUJyYW5kQ29sb3JzRnJvbVByaW1hcnlIZXgiLCJnZXRDaHJvbWVEaXZpZGVyQ29sb3JzRnJvbVByaW1hcnlIZXgiLCJnZXRJbnRlcmFjdGl2ZUNvbG9yc0Zyb21QcmltYXJ5SGV4IiwiZ2V0Rm9jdXNDb2xvcnNGcm9tUHJpbWFyeUhleCIsImdldFNlY29uZGFyeUNvbG9yc0Zyb21TZWNvbmRhcnlIZXgiLCJnZXRTZWxlY3Rpb25QcmltYXJ5RnJvbVNlY29uZGFyeUhleCIsImdldFNlbGVjdGlvblNlY29uZGFyeUZyb21TZWNvbmRhcnlIZXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUFNQSxLLEdBQ0wsZUFBWUMsS0FBWixFQUFtQkMsSUFBbkIsRUFBeUI7QUFBQTs7QUFDeEIsT0FBS0MsR0FBTCxHQUFXRixLQUFYO0FBQ0EsT0FBS0csR0FBTCxHQUFXQyxRQUFRLENBQUNKLEtBQUQsQ0FBbkI7QUFDQSxPQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxDOztBQUdGLElBQU1DLEdBQUcsR0FBRyxTQUFOQSxHQUFNLENBQUNGLEtBQUQsRUFBVztBQUN0QixNQUFNSyxXQUFXLEdBQUdMLEtBQUssQ0FBQ00sUUFBTixDQUFlLEVBQWYsQ0FBcEI7QUFDQSxTQUFPRCxXQUFXLENBQUNFLE1BQVosS0FBdUIsQ0FBdkIsY0FBK0JGLFdBQS9CLElBQStDQSxXQUF0RDtBQUNBLENBSEQ7O0FBS0EsSUFBTUcsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFDQyxNQUFELEVBQVNDLE1BQVQsRUFBaUJDLEtBQWpCLEVBQTJCO0FBQ2pEQSxPQUFL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QUFtQyxHQUFHLFNBQXRDQSxtQ0FBc0MsQ0FBQ3pGLEdBQUQsRUFBUztBQUFBLG1CQUMzQ2tFLFFBQVEsQ0FBQ2xFLEdBQUQsQ0FEbUM7QUFBQSxNQUN0RHlFLENBRHNELGNBQ3REQSxDQURzRDtBQUFBLE1BQ25EQyxDQURtRCxjQUNuREEsQ0FEbUQ7QUFBQSxNQUNoREMsQ0FEZ0QsY0FDaERBLENBRGdELEVBRzNEO0FBQ0E7QUFDQTs7O0FBRUEsU0FBT0UsUUFBUSxDQUFDSixDQUFELEVBQUlDLENBQUosRUFBT0MsQ0FBUCxDQUFmO0FBQ0EsQ0FSTTtBQVVBLElBQU1lLHFDQUFxQyxHQUFHLFNBQXhDQSxxQ0FBd0MsQ0FBQzFGLEdBQUQsRUFBUztBQUFBLG1CQUM3Q2tFLFFBQVEsQ0FBQ2xFLEdBQUQsQ0FEcUM7QUFBQSxNQUN4RHlFLENBRHdELGNBQ3hEQSxDQUR3RDtBQUFBLE1BQ3JEQyxDQURxRCxjQUNyREEsQ0FEcUQ7QUFBQSxNQUNsREMsQ0FEa0QsY0FDbERBLENBRGtEOztBQUc3REYsR0FBQyxHQUFHQSxDQUFDLEdBQUcsQ0FBSixHQUFRLENBQVIsR0FBWSxDQUFaLEdBQWdCQSxDQUFDLEdBQUcsQ0FBeEI7QUFDQUMsR0FBQyxHQUFHQSxDQUFDLEdBQUcsRUFBSixHQUFTLENBQVQsR0FBYSxDQUFiLEdBQWlCQSxDQUFDLEdBQUcsRUFBekI7QUFDQUMsR0FBQyxHQUFHQSxDQUFDLEdBQUcsRUFBSixHQUFTLEdBQVQsR0FBZSxHQUFmLEdBQXFCQSxDQUFDLEdBQUcsRUFBN0I7QUFFQSxTQUFPRSxRQUFRLENBQUNKLENBQUQsRUFBSUMsQ0FBSixFQUFPQyxDQUFQLENBQWY7QUFDQSxDQVJNIiwiZmlsZSI6Ii4vbGliL2NvbG9yLWdlbmVyYXRvci9nZW5lcmF0ZUNvbG9ycy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIENvbG9yIHtcblx0Y29uc3RydWN0b3IoY29sb3IsIG5hbWUpIHtcblx0XHR0aGlzLmhleCA9IGNvbG9yO1xuXHRcdHRoaXMucmdiID0gaGV4VG9SZ2IoY29sb3IpO1xuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cdH1cbn1cblxuY29uc3QgaGV4ID0gKGNvbG9yKSA9PiB7XG5cdGNvbnN0IGNvbG9yU3RyaW5nID0gY29sb3IudG9TdHJpbmcoMTYpO1xuXHRyZXR1cm4gY29sb3JTdHJpbmcubGVuZ3RoID09PSAxID8gYDAke2NvbG9yU3RyaW5nfWAgOiBjb2xvclN0cmluZztcbn07XG5cbmNvbnN0IGNhbGN1bGF0ZUNvbG9yID0gKGNvbG9yMSwgY29sb3IyLCByYXRpbykgPT4ge1xuXHRyYXRpbyA9IChNYXRoLnJvdW5kKHJhdGlvICogMTAwKSAvIDEwMCkudG9GaXhlZCgyKTtcblxuXHRjb25zdCByID0gTWF0aC5jZWlsKFxuXHRcdHBhcnNlSW50KGNvbG9yMi5zdWJzdHJpbmcoMCwgMiksIDE2KSAqIHJhdGlvICtcblx0XHRcdHBhcnNlSW50KGNvbG9yMS5zdWJzdHJpbmcoMCwgMiksIDE2KSAqICgxIC0gcmF0aW8pXG5cdCk7XG5cdGNvbnN0IGcgPSBNYXRoLmNlaWwoXG5cdFx0cGFyc2VJbnQoY29sb3IyLnN1YnN0cmluZygyLCA0KSwgMTYpICogcmF0aW8gK1xuXHRcdFx0cGFyc2VJbnQoY29sb3IxLnN1YnN0cmluZygyLCA0KSwgMTYpICogKDEgLSByYXRpbylcblx0KTtcblx0Y29uc3QgYiA9IE1hdGguY2VpbChcblx0XHRwYXJzZUludChjb2xvcjIuc3Vic3RyaW5nKDQsIDYpLCAxNikgKiByYXRpbyArXG5cdFx0XHRwYXJzZUludChjb2xvcjEuc3Vic3RyaW5nKDQsIDYpLCAxNikgKiAoMSAtIHJhdGlvKVxuXHQpO1xuXG5cdHJldHVybiBoZXgocikgKyBoZXgoZykgKyBoZXgoYik7XG59O1xuXG5jb25zdCBoZXhUb1JnYiA9IChoZXgpID0+IHtcblx0Y29uc3QgciA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoMSwgMyksIDE2KTtcblx0Y29uc3QgZyA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoMywgNSksIDE2KTtcblx0Y29uc3QgYiA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoNSwgNyksIDE2KTtcblxuXHRyZXR1cm4gYCR7cn0sJHtnfSwke2J9YDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUNvbG9ycyA9IChjb2xvcjEsIGNvbG9yMiwgdmFyaWF0aW9ucykgPT4ge1xuXHRpZiAoIXZhcmlhdGlvbnMpIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHRjb2xvcjEgPSBjb2xvcjEuc3RhcnRzV2l0aCgnIycpID8gY29sb3IxIDogYCMke2NvbG9yMX1gO1xuXHRjb2xvcjIgPSBjb2xvcjIuc3RhcnRzV2l0aCgnIycpID8gY29sb3IyIDogYCMke2NvbG9yMn1gO1xuXHRsZXQgcGVyY2VudGFnZSA9IDEgLyB2YXJpYXRpb25zO1xuXHRjb25zdCBudW1iZXJPZkxvb3BzID0gMSAvIHBlcmNlbnRhZ2UgLSAxO1xuXG5cdGxldCBjb2xvcnMgPSBbXTtcblxuXHRmb3IgKGxldCBpID0gMTsgaSA8PSBudW1iZXJPZkxvb3BzOyBpKyspIHtcblx0XHRjb2xvcnMgPSBbXG5cdFx0XHQuLi5jb2xvcnMsXG5cdFx0XHQnIycgKyBjYWxjdWxhdGVDb2xvcihjb2xvcjEuc2xpY2UoMSksIGNvbG9yMi5zbGljZSgxKSwgaSAqIHBlcmNlbnRhZ2UpLFxuXHRcdF07XG5cdH1cblxuXHRyZXR1cm4gY29sb3JzO1xufTtcblxuY29uc3QgZ2VuZXJhdGVDb2xvclJhbmdlID0gKFxuXHRjb2xvcixcblx0bGlnaHRWYXJpYXRpb25zLFxuXHRsaWdodFBlcmNlbnRhZ2UsXG5cdGRhcmtWYXJpYXRpb25zLFxuXHRkYXJrUGVyY2VudGFnZSxcblx0aG9vayxcblx0c3RhcnRJbmRleCxcblx0aW5jbHVkZUVuZHMsXG5cdGlzRGFya1xuKSA9PiB7XG5cdGNvbnN0IGZpcnN0Q29sb3IgPSBjYWxjdWxhdGVDb2xvcihcblx0XHQnZmZmZmZmJyxcblx0XHRjb2xvci5zbGljZSgxKSxcblx0XHQxIC0gbGlnaHRQZXJjZW50YWdlXG5cdCk7XG5cdGNvbnN0IGxhc3RDb2xvciA9IGNhbGN1bGF0ZUNvbG9yKGNvbG9yLnNsaWNlKDEpLCAnMDAwMDAwJywgZGFya1BlcmNlbnRhZ2UpO1xuXHRjb25zdCBsaWdodENvbG9ycyA9IGdlbmVyYXRlQ29sb3JzKGZpcnN0Q29sb3IsIGNvbG9yLCBsaWdodFZhcmlhdGlvbnMpO1xuXHRjb25zdCBkYXJrQ29sb3JzID0gZ2VuZXJhdGVDb2xvcnMoY29sb3IsIGxhc3RDb2xvciwgZGFya1ZhcmlhdGlvbnMpO1xuXG5cdGxldCBvdXQgPSBbXTtcblx0aWYgKGxpZ2h0VmFyaWF0aW9ucykge1xuXHRcdG91dCA9IFtgIyR7Zmlyc3RDb2xvcn1gLCAuLi5saWdodENvbG9ycywgLi4ub3V0XTtcblx0fVxuXG5cdG91dCA9IFsuLi5vdXQsIGNvbG9yXTtcblxuXHRpZiAoZGFya1ZhcmlhdGlvbnMpIHtcblx0XHRvdXQgPSBbLi4ub3V0LCAuLi5kYXJrQ29sb3JzLCBgIyR7bGFzdENvbG9yfWBdO1xuXHR9XG5cblx0aWYgKGluY2x1ZGVFbmRzKSB7XG5cdFx0b3V0ID0gW2AjZmZmZmZmYCwgLi4ub3V0LCBgIzAwMDAwMGBdO1xuXHR9XG5cblx0aWYgKGlzRGFyaykge1xuXHRcdG91dC5yZXZlcnNlKCk7XG4gIH1cbiAgY29uc29sZS5sb2coaXNEYXJrKTtcblxuICBjb25zb2xlLmxvZygnY29sb3InLCBvdXQpO1xuICBjb25zb2xlLmxvZyhzdGFydEluZGV4KTtcblxuXHRyZXR1cm4gb3V0Lm1hcCgoY29sb3IsIGluZGV4KSA9PiB7XG5cdFx0Y29uc3QgbmFtZSA9IGAtLSR7aG9va30tJHtpbmRleCArIChzdGFydEluZGV4ID8gc3RhcnRJbmRleCA6IDApfWA7XG5cdFx0cmV0dXJuIG5ldyBDb2xvcihjb2xvciwgbmFtZSk7XG5cdH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENvbG9ycyA9IChjb2xvcnNKc29uLCBzZWxlY3RlZENvbG9ycywgaXNEYXJrKSA9PiB7XG5cdGNvbnN0IGdlbmVyYXRlZCA9IHt9O1xuXG5cdGZvciAoY29uc3QgY29sb3Igb2YgT2JqZWN0LnZhbHVlcyhjb2xvcnNKc29uLmNvbG9ycykpIHtcblx0XHRjb25zdCB7XG5cdFx0XHRpZCxcblx0XHRcdGxpZ2h0VmFyaWF0aW9ucyxcblx0XHRcdGxpZ2h0UGVyY2VudGFnZSxcblx0XHRcdGRhcmtWYXJpYXRpb25zLFxuXHRcdFx0ZGFya1BlcmNlbnRhZ2UsXG5cdFx0XHRob29rLFxuXHRcdFx0c3RhcnRJbmRleCxcblx0XHR9ID0gY29sb3I7XG5cdFx0Y29uc3QgYmFzZUNvbG9yID0gc2VsZWN0ZWRDb2xvcnNbaWRdO1xuXG5cdFx0aWYgKFxuXHRcdFx0IWJhc2VDb2xvciB8fFxuXHRcdFx0YmFzZUNvbG9yLmxlbmd0aCAhPT0gNyB8fFxuXHRcdFx0aWQgPT09ICdzdXJmYWNlTmV1dHJhbCcgfHxcblx0XHRcdGlkID09PSAnc3VyZmFjZURpdmlkZXInXG5cdFx0KSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRnZW5lcmF0ZWRbaWRdID0gZ2VuZXJhdGVDb2xvclJhbmdlKFxuXHRcdFx0YmFzZUNvbG9yLFxuXHRcdFx0bGlnaHRWYXJpYXRpb25zLFxuXHRcdFx0bGlnaHRQZXJjZW50YWdlLFxuXHRcdFx0ZGFya1ZhcmlhdGlvbnMsXG5cdFx0XHRkYXJrUGVyY2VudGFnZSxcblx0XHRcdGhvb2ssXG5cdFx0XHRzdGFydEluZGV4LFxuXHRcdFx0aWQgPT09ICduZXV0cmFscycgPyB0cnVlIDogZmFsc2UsXG5cdFx0XHRpc0RhcmsgJiYgaWQgPT09ICduZXV0cmFscycgPyB0cnVlIDogZmFsc2Vcblx0XHQpO1xuXHR9XG5cblx0aWYgKGdlbmVyYXRlZC5uZXV0cmFscykge1xuXHRcdGNvbnN0IG5ldXRyYWxDb2xvcnMgPSBnZW5lcmF0ZWQubmV1dHJhbHM7XG5cblx0XHRjb25zdCBzdXJmYWNlTmV1dHJhbEJhc2UgPSBuZXV0cmFsQ29sb3JzWzRdLmhleDtcblx0XHRjb25zdCBzdXJmYWNlTmV1dHJhbENvbG9ycyA9IGdlbmVyYXRlQ29sb3JSYW5nZShcblx0XHRcdHN1cmZhY2VOZXV0cmFsQmFzZSxcblx0XHRcdGNvbG9yc0pzb24uY29sb3JzLnN1cmZhY2VOZXV0cmFsLmxpZ2h0VmFyaWF0aW9ucyxcblx0XHRcdGNvbG9yc0pzb24uY29sb3JzLnN1cmZhY2VOZXV0cmFsLmxpZ2h0UGVyY2VudGFnZSxcblx0XHRcdGNvbG9yc0pzb24uY29sb3JzLnN1cmZhY2VOZXV0cmFsLmRhcmtWYXJpYXRpb25zLFxuXHRcdFx0Y29sb3JzSnNvbi5jb2xvcnMuc3VyZmFjZU5ldXRyYWwuZGFya1BlcmNlbnRhZ2UsXG5cdFx0XHRjb2xvcnNKc29uLmNvbG9ycy5zdXJmYWNlTmV1dHJhbC5ob29rLFxuXHRcdFx0Y29sb3JzSnNvbi5jb2xvcnMuc3VyZmFjZU5ldXRyYWwuc3RhcnRJbmRleCxcblx0XHRcdGZhbHNlLFxuXHRcdFx0aXNEYXJrXG5cdFx0KTtcblxuXHRcdGlzRGFyayA/IHN1cmZhY2VOZXV0cmFsQ29sb3JzLnNoaWZ0KCkgOiBzdXJmYWNlTmV1dHJhbENvbG9ycy5wb3AoKTtcblx0XHRnZW5lcmF0ZWQuc3VyZmFjZU5ldXRyYWwgPSBzdXJmYWNlTmV1dHJhbENvbG9ycztcblxuXHRcdGNvbnN0IHN1cmZhY2VEaXZpZGVyQmFzZSA9IG5ldXRyYWxDb2xvcnNbOF0uaGV4O1xuXHRcdGNvbnN0IHN1cmZhY2VEaXZpZGVyQ29sb3JzID0gZ2VuZXJhdGVDb2xvclJhbmdlKFxuXHRcdFx0c3VyZmFjZURpdmlkZXJCYXNlLFxuXHRcdFx0Y29sb3JzSnNvbi5jb2xvcnMuc3VyZmFjZURpdmlkZXIubGlnaHRWYXJpYXRpb25zLFxuXHRcdFx0Y29sb3JzSnNvbi5jb2xvcnMuc3VyZmFjZURpdmlkZXIubGlnaHRQZXJjZW50YWdlLFxuXHRcdFx0Y29sb3JzSnNvbi5jb2xvcnMuc3VyZmFjZURpdmlkZXIuZGFya1ZhcmlhdGlvbnMsXG5cdFx0XHRjb2xvcnNKc29uLmNvbG9ycy5zdXJmYWNlRGl2aWRlci5kYXJrUGVyY2VudGFnZSxcblx0XHRcdGNvbG9yc0pzb24uY29sb3JzLnN1cmZhY2VEaXZpZGVyLmhvb2ssXG5cdFx0XHRjb2xvcnNKc29uLmNvbG9ycy5zdXJmYWNlRGl2aWRlci5zdGFydEluZGV4LFxuXHRcdFx0ZmFsc2UsXG5cdFx0XHRpc0Rhcmtcblx0XHQpO1xuXHRcdGlzRGFyayA/IHN1cmZhY2VEaXZpZGVyQ29sb3JzLnNoaWZ0KCkgOiBzdXJmYWNlRGl2aWRlckNvbG9ycy5wb3AoKTtcblx0XHRnZW5lcmF0ZWQuc3VyZmFjZURpdmlkZXIgPSBzdXJmYWNlRGl2aWRlckNvbG9ycztcblx0fVxuXG5cdHJldHVybiBnZW5lcmF0ZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgaXNIZXggPSAoaGV4KSA9PiB7XG5cdHJldHVybiAvXiNbMC05QS1GXXs2fSQvaS50ZXN0KGhleCk7XG59O1xuXG5leHBvcnQgY29uc3QgaGV4VG9IU0wgPSAoSCkgPT4ge1xuXHQvLyBDb252ZXJ0IGhleCB0byBSR0IgZmlyc3Rcblx0bGV0IHIgPSAwLFxuXHRcdGcgPSAwLFxuXHRcdGIgPSAwO1xuXHRpZiAoSC5sZW5ndGggPT0gNCkge1xuXHRcdHIgPSAnMHgnICsgSFsxXSArIEhbMV07XG5cdFx0ZyA9ICcweCcgKyBIWzJdICsgSFsyXTtcblx0XHRiID0gJzB4JyArIEhbM10gKyBIWzNdO1xuXHR9IGVsc2UgaWYgKEgubGVuZ3RoID09IDcpIHtcblx0XHRyID0gJzB4JyArIEhbMV0gKyBIWzJdO1xuXHRcdGcgPSAnMHgnICsgSFszXSArIEhbNF07XG5cdFx0YiA9ICcweCcgKyBIWzVdICsgSFs2XTtcblx0fVxuXHQvLyBUaGVuIHRvIEhTTFxuXHRyIC89IDI1NTtcblx0ZyAvPSAyNTU7XG5cdGIgLz0gMjU1O1xuXHRsZXQgY21pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuXHRcdGNtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcblx0XHRkZWx0YSA9IGNtYXggLSBjbWluLFxuXHRcdGggPSAwLFxuXHRcdHMgPSAwLFxuXHRcdGwgPSAwO1xuXG5cdGlmIChkZWx0YSA9PSAwKSBoID0gMDtcblx0ZWxzZSBpZiAoY21heCA9PSByKSBoID0gKChnIC0gYikgLyBkZWx0YSkgJSA2O1xuXHRlbHNlIGlmIChjbWF4ID09IGcpIGggPSAoYiAtIHIpIC8gZGVsdGEgKyAyO1xuXHRlbHNlIGggPSAociAtIGcpIC8gZGVsdGEgKyA0O1xuXG5cdGggPSBNYXRoLnJvdW5kKGggKiA2MCk7XG5cblx0aWYgKGggPCAwKSBoICs9IDM2MDtcblxuXHRsID0gKGNtYXggKyBjbWluKSAvIDI7XG5cdHMgPSBkZWx0YSA9PSAwID8gMCA6IGRlbHRhIC8gKDEgLSBNYXRoLmFicygyICogbCAtIDEpKTtcblx0cyA9ICsocyAqIDEwMCkudG9GaXhlZCgxKTtcblx0bCA9ICsobCAqIDEwMCkudG9GaXhlZCgxKTtcblxuXHQvLyByZXR1cm4gXCJoc2woXCIgKyBNYXRoLnJvdW5kKGgpICsgXCIsXCIgKyBNYXRoLnJvdW5kKHMpICsgXCIsXCIgKyBNYXRoLnJvdW5kKGwpICsgXCIpXCI7XG5cdHJldHVybiB7XG5cdFx0aDogTWF0aC5yb3VuZChoKSxcblx0XHRzOiBNYXRoLnJvdW5kKHMpLFxuXHRcdGw6IE1hdGgucm91bmQobCksXG5cdH07XG59O1xuXG5leHBvcnQgY29uc3QgSFNMVG9IZXggPSAoaCwgcywgbCkgPT4ge1xuXHRzIC89IDEwMDtcblx0bCAvPSAxMDA7XG5cblx0bGV0IGMgPSAoMSAtIE1hdGguYWJzKDIgKiBsIC0gMSkpICogcyxcblx0XHR4ID0gYyAqICgxIC0gTWF0aC5hYnMoKChoIC8gNjApICUgMikgLSAxKSksXG5cdFx0bSA9IGwgLSBjIC8gMixcblx0XHRyID0gMCxcblx0XHRnID0gMCxcblx0XHRiID0gMDtcblxuXHRpZiAoMCA8PSBoICYmIGggPCA2MCkge1xuXHRcdHIgPSBjO1xuXHRcdGcgPSB4O1xuXHRcdGIgPSAwO1xuXHR9IGVsc2UgaWYgKDYwIDw9IGggJiYgaCA8IDEyMCkge1xuXHRcdHIgPSB4O1xuXHRcdGcgPSBjO1xuXHRcdGIgPSAwO1xuXHR9IGVsc2UgaWYgKDEyMCA8PSBoICYmIGggPCAxODApIHtcblx0XHRyID0gMDtcblx0XHRnID0gYztcblx0XHRiID0geDtcblx0fSBlbHNlIGlmICgxODAgPD0gaCAmJiBoIDwgMjQwKSB7XG5cdFx0ciA9IDA7XG5cdFx0ZyA9IHg7XG5cdFx0YiA9IGM7XG5cdH0gZWxzZSBpZiAoMjQwIDw9IGggJiYgaCA8IDMwMCkge1xuXHRcdHIgPSB4O1xuXHRcdGcgPSAwO1xuXHRcdGIgPSBjO1xuXHR9IGVsc2UgaWYgKDMwMCA8PSBoICYmIGggPCAzNjApIHtcblx0XHRyID0gYztcblx0XHRnID0gMDtcblx0XHRiID0geDtcblx0fVxuXHQvLyBIYXZpbmcgb2J0YWluZWQgUkdCLCBjb252ZXJ0IGNoYW5uZWxzIHRvIGhleFxuXHRyID0gTWF0aC5yb3VuZCgociArIG0pICogMjU1KS50b1N0cmluZygxNik7XG5cdGcgPSBNYXRoLnJvdW5kKChnICsgbSkgKiAyNTUpLnRvU3RyaW5nKDE2KTtcblx0YiA9IE1hdGgucm91bmQoKGIgKyBtKSAqIDI1NSkudG9TdHJpbmcoMTYpO1xuXG5cdC8vIFByZXBlbmQgMHMsIGlmIG5lY2Vzc2FyeVxuXHRpZiAoci5sZW5ndGggPT0gMSkgciA9ICcwJyArIHI7XG5cdGlmIChnLmxlbmd0aCA9PSAxKSBnID0gJzAnICsgZztcblx0aWYgKGIubGVuZ3RoID09IDEpIGIgPSAnMCcgKyBiO1xuXG5cdHJldHVybiAnIycgKyByICsgZyArIGI7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TmV1dHJhbEJhc2VDb2xvcnNGcm9tQnJhbmRQcmltYXJ5SGV4ID0gKGhleCkgPT4ge1xuXHRsZXQge2gsIHMsIGx9ID0gaGV4VG9IU0woaGV4KTtcblxuXHQvLyBoID0gKGggKyA1MyA+IDM2MCkgPyAzNjAgOiBoICsgNTM7XG5cdHMgPSBzIC0gMjUgPCAwID8gMCA6IHMgLSAyNTtcblx0bCA9IGwgLSAxOCA8IDAgPyAwIDogbCAtIDE4O1xuXG5cdHJldHVybiBIU0xUb0hleChoLCBzLCBsKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRQcmltYXJ5Q29sb3JzRnJvbUJyYW5kUHJpbWFyeUhleCA9IChoZXgpID0+IHtcblx0Ly8gbGV0IHtoLCBzLCBsfSA9IGhleFRvSFNMKGhleCk7XG5cblx0Ly8gaCA9IChoIC0gMTkgPCAwKSA/IDAgOiBoIC0gMTk7XG5cdC8vIHMgPSAocyArIDQxID4gMTAwKSA/IDEwMCA6IHMgKyA0MTtcblx0Ly8gbCA9IChsICsgMTEgPiAxMDApID8gMTAwIDogbCArIDExO1xuXG5cdC8vIHJldHVybiBIU0xUb0hleChoLCBzLCBsKTtcblx0cmV0dXJuIGhleDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTdXJmYWNlQnJhbmRDb2xvcnNGcm9tUHJpbWFyeUhleCA9IChoZXgpID0+IHtcblx0bGV0IHtoLCBzLCBsfSA9IGhleFRvSFNMKGhleCk7XG5cblx0Ly8gaCA9IChoICsgNTMgPiAzNjApID8gMzYwIDogaCArIDUzO1xuXHQvLyBzID0gKHMgKyA0ID4gMTAwKSA/IDEwMCA6IHMgKyA0O1xuXHRsID0gbCArIDI3ID4gMTAwID8gMTAwIDogbCArIDI3O1xuXG5cdHJldHVybiBIU0xUb0hleChoLCBzLCBsKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDaHJvbWVCcmFuZENvbG9yc0Zyb21QcmltYXJ5SGV4ID0gKGhleCkgPT4ge1xuXHRsZXQge2gsIHMsIGx9ID0gaGV4VG9IU0woaGV4KTtcblxuXHRoID0gaCAtIDIgPCAwID8gMCA6IGggLSAyO1xuXHRzID0gcyAtIDExIDwgMCA/IDAgOiBzIC0gMTE7XG5cdGwgPSBsICsgMTMgPiAxMDAgPyAxMDAgOiBsICsgMTM7XG5cblx0cmV0dXJuIEhTTFRvSGV4KGgsIHMsIGwpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENocm9tZURpdmlkZXJDb2xvcnNGcm9tUHJpbWFyeUhleCA9IChoZXgpID0+IHtcblx0bGV0IHtoLCBzLCBsfSA9IGhleFRvSFNMKGhleCk7XG5cblx0aCA9IGggLSAyIDwgMCA/IDAgOiBoIC0gMjtcblx0bCA9IGwgLSAzIDwgMCA/IDAgOiBsIC0gMztcblxuXHRyZXR1cm4gSFNMVG9IZXgoaCwgcywgbCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0SW50ZXJhY3RpdmVDb2xvcnNGcm9tUHJpbWFyeUhleCA9IChoZXgpID0+IHtcblx0bGV0IHtoLCBzLCBsfSA9IGhleFRvSFNMKGhleCk7XG5cblx0Ly8gaCA9IChoIC0gMiA8IDApID8gMCA6IGggLSAyO1xuXHQvLyBsID0gKGwgLSAzIDwgMCkgPyAwIDogbCAtIDM7XG5cblx0cmV0dXJuIEhTTFRvSGV4KGgsIHMsIGwpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEZvY3VzQ29sb3JzRnJvbVByaW1hcnlIZXggPSAoaGV4KSA9PiB7XG5cdGxldCB7aCwgcywgbH0gPSBoZXhUb0hTTChoZXgpO1xuXG5cdC8vIGggPSAoaCAtIDIgPCAwKSA/IDAgOiBoIC0gMjtcblx0Ly8gbCA9IChsIC0gMyA8IDApID8gMCA6IGwgLSAzO1xuXG5cdHJldHVybiBIU0xUb0hleChoLCBzLCBsKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTZWNvbmRhcnlDb2xvcnNGcm9tU2Vjb25kYXJ5SGV4ID0gKGhleCkgPT4ge1xuXHRsZXQge2gsIHMsIGx9ID0gaGV4VG9IU0woaGV4KTtcblxuXHQvLyBoID0gKGggKyAzMyA+IDM2MCkgPyAzNjAgOiBoICsgMzM7XG5cdC8vIHMgPSAocyArIDczID4gMTAwKSA/IDEwMCA6IHMgKyA3Mztcblx0Ly8gbCA9IChsIC0gMzMgPCAzMCkgPyAzMCA6IGwgLSAzMztcblxuXHRyZXR1cm4gSFNMVG9IZXgoaCwgcywgbCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0aW9uUHJpbWFyeUZyb21TZWNvbmRhcnlIZXggPSAoaGV4KSA9PiB7XG5cdGxldCB7aCwgcywgbH0gPSBoZXhUb0hTTChoZXgpO1xuXG5cdC8vIGggPSAoaCArIDExID4gMzYwKSA/IDM2MCA6IGggKyAxMTtcblx0Ly8gcyA9IChzICsgNTcgPiAxMDApID8gMTAwIDogcyArIDU3O1xuXHQvLyBsID0gKGwgLSAyOSA8IDApID8gMCA6IGwgLSAyOTtcblxuXHRyZXR1cm4gSFNMVG9IZXgoaCwgcywgbCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0aW9uU2Vjb25kYXJ5RnJvbVNlY29uZGFyeUhleCA9IChoZXgpID0+IHtcblx0bGV0IHtoLCBzLCBsfSA9IGhleFRvSFNMKGhleCk7XG5cblx0aCA9IGggLSAzIDwgMCA/IDAgOiBoIC0gMztcblx0cyA9IHMgLSA4NSA8IDAgPyAwIDogcyAtIDg1O1xuXHRsID0gbCArIDU5ID4gMTAwID8gMTAwIDogbCArIDU5O1xuXG5cdHJldHVybiBIU0xUb0hleChoLCBzLCBsKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./lib/color-generator/generateColors.js\n");

/***/ })

})