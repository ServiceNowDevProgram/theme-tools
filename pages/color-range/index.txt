"use strict";

import {
  html,
  LitElement,
} from "https://unpkg.com/lit-element@2.3.0/lit-element.js?module";
import {
  isValidHexColor,
  hexToRgb,
  createColorSet,
  COLOR_SET_4,
  COLOR_SET_5,
  COLOR_SET_21,
} from "../utils/color.js";
import "../utils/components/demo-select.js";

const COLOR_SETS = [
  {
    id: "set4",
    label: "4 Color Set (e.g. primary-*, secondary-*)",
    def: COLOR_SET_4,
  },
  {
    id: "set5",
    label: "5 Color Set (e.g. alert-info-*)",
    def: COLOR_SET_5,
  },
  {
    id: "set21",
    label: "21 Color Set (neutral-*)",
    def: COLOR_SET_21,
  },
];

class AppShell extends LitElement {
  static get properties() {
    return {
      colorSet: { type: String },
      colorBase: { type: String },
      colorPrefix: { type: String },
    };
  }

  constructor() {
    super();
    this.colorSet = "set4";
    this.colorBase = "#0071e3";
    this.colorPrefix = "primary";
  }

  createRenderRoot() {
    // @TODO: This is a hack to turn off shadow DOM so bootstrap can be
    // applied within the shadow root
    return this;
  }

  _onColorSetChange(val) {
    this.colorSet = val;
  }

  _onColorBaseChange(val) {
    this.colorBase = val;
  }

  _onColorPrefixChange(val) {
    this.colorPrefix = val;
  }

  _renderColorRange() {
    if (!this.colorSet || !this.colorBase || !isValidHexColor(this.colorBase)) {
      return;
    }
    const color = hexToRgb(this.colorBase);
    const { def: setDef } = COLOR_SETS.find((x) => x.id === this.colorSet);
    const range = createColorSet(color, setDef);
    console.log(range);
    const items = range.map((x, i) => {
      const label = this.colorPrefix
        ? `now-color--${this.colorPrefix}-${i}`
        : i;
      // const json = ``;
      return html`<div class="color-item">
        <small>${label}</small>
        <div class="color-dot" style="background:RGB(${x.toString()})"></div>
        <div class="inline-form-grid">
          <label for="rgb-${label}">RGB</label>
          <input
            id="rgb-${label}"
            type="text"
            class="form-control form-control-sm"
            disabled
            value="${x.toString()}"
          />
          <!-- <label for="json-${label}">JSON</label>
          <input
            id="json-${label}"
            type="text"
            class="form-control form-control-sm"
            disabled
            value="${x.toString()}"
          /> -->
        </div>
      </div>`;
    });
    const itemsAsCustomProps = range.map(
      (x, i) =>
        `  --now-color--${this.colorPrefix || "???"}-${i}: ${x.toString()};`
    );
    const itemsCss = `:root {\n${itemsAsCustomProps.join("\n")}\n}`;
    const itemsAsJson = range.reduce((acc, x, i) => {
      return {
        ...acc,
        [`--now-color--${this.colorPrefix || "???"}-${i}`]: x.toString(),
      };
    }, {});
    const itemsAsExcel = range.map(
      (x, i) => `now-color--${this.colorPrefix || "???"}-${i}	${x.toString()};`
    );
    return html`
      <div class="color-range">
        ${items}
      </div>
      <div class="color-code">
        <div>
          <p>Theme CSS</p>
          <textarea id="itemscss" .value="${itemsCss}" disabled></textarea>
        </div>
        <div>
          <p>Theme JSON</p>
          <textarea
            id="itemsjson"
            .value="${JSON.stringify(itemsAsJson, null, "  ")}"
            disabled
          ></textarea>
        </div>
        <div>
          <p>Theme Excel</p>
          <textarea
            id="itemsexcel"
            .value="${itemsAsExcel.join("\n")}"
            disabled
          ></textarea>
        </div>
      </div>
    `;
  }

  render() {
    const baseInvalid = this.colorBase && !isValidHexColor(this.colorBase);
    const baseError = baseInvalid
      ? html`<span class="text-danger">Must be a valid hex color</span>`
      : "";
    return html`
      <h2>Color Range</h2>
      <p>
        Some NDS theme hooks expect a range of colors from light to dark (aka a
        color set). An example of this is the primary color set, which is a 4
        color set with variables from
        now-color--primary-0...now-color--primary-4. NDS designers have defined
        rules for how each stop in these color sets should be related to each
        other. Enter a hex color below to get a color set.
      </p>
      <demo-select
        name="colorSet"
        label="Color Set Type"
        .options="${COLOR_SETS}"
        .selected="${this.colorSet}"
        .onSelect="${(val) => this._onColorSetChange(val)}"
      ></demo-select>
      <div class="form-group">
        <label for="colorBase">Base Color (hex)</label>
        ${baseError}
        <input
          type="text"
          class="form-control ${baseInvalid ? "is-invalid" : ""}"
          id="colorBase"
          @input="${(e) => this._onColorBaseChange(e.target.value)}"
          value="${this.colorBase}"
        />
      </div>
      <div class="form-group">
        <label for="colorPrefix">Prefix (optional, e.g. primary)</label>
        ${baseError}
        <input
          type="text"
          class="form-control ${baseInvalid ? "is-invalid" : ""}"
          id="colorPrefix"
          @input="${(e) => this._onColorPrefixChange(e.target.value)}"
          value="${this.colorPrefix}"
        />
      </div>
      ${this._renderColorRange()}
    `;
  }
}

customElements.define("app-shell", AppShell);
